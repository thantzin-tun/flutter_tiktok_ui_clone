
SafeArea(
      child: BlocProvider<TodoBloc>(
        create: (context) => TodoBloc(),
        child: Scaffold(
          appBar: AppBar(
            toolbarHeight: 120,
            title: const Text(
              "Daily Activities",
              style: TextStyle(fontSize: 30),
            ),
            centerTitle: true,
            bottom: PreferredSize(
              preferredSize: const Size(double.infinity, 0),
              child: Row(
                mainAxisAlignment: MainAxisAlignment.center,
                children: <Widget>[
                  Container(
                    width: 330,
                    decoration: BoxDecoration(
                        color: Colors.white,
                        borderRadius: BorderRadius.circular(20)),
                    child: const TextField(
                      decoration: InputDecoration(
                        contentPadding: EdgeInsets.only(left: 20, right: 20),
                        border: InputBorder.none,
                        hintText: "Search...",
                      ),
                    ),
                  ),
                  const Icon(
                    Icons.search,
                    color: Colors.white,
                    size: 30,
                  )
                ],
              ),
            ),
          ),
          floatingActionButton: FloatingActionButton(
            onPressed: () {
              ShowDialogMethod(context,null,null);
            },
            child: const Icon(Icons.add),
          ),
          body: BlocBuilder<TodoBloc, TodoInitialState>(
            bloc: todoBloc,
            builder: (context, state) {
              if (state is TodoSuccessState) {
                List<Item> mytodoItems = state.items;
                return ListView.builder(
                  itemCount: mytodoItems.length,
                  itemBuilder: (context, index) {
                    return Card(
                      margin: const EdgeInsets.only(top: 10,bottom: 10,left: 5,right: 5),
                      elevation: 2,
                      child: ListTile(
                        title: Text(
                          "${mytodoItems[index].todoName}",
                          style: const TextStyle(
                              fontSize: 15, fontWeight: FontWeight.w700),
                        ),
                        trailing: IconButton(onPressed: (){
                          todoBloc.add(RemoveToDoItem(mytodoItems[index].id));
                        }, icon: const Icon(Icons.delete,color: Colors.red,)),
                        leading: IconButton(onPressed:(){
                             ShowDialogMethod(context,mytodoItems[index].todoName,mytodoItems[index].description);
                        }, icon: const Icon(Icons.edit,color: Colors.blue,)),
                      ),
                    );
                  },
                );
              }
              return const Center(child: CircularProgressIndicator());
            },
          ),
        ),
      ),
    );









-----------------------------------------------------------------------------------------------------

 Future<dynamic> ShowDialogMethod(BuildContext context,String? todoName,String? description) {
    return showDialog(
              context: context,
              builder: (context) => AlertDialog(
                content: SingleChildScrollView(
                  child: Form(
                    key: formKey,
                    child: Column(
                      mainAxisAlignment: MainAxisAlignment.start,
                      children: <Widget>[
                        TextFormField(
                          initialValue: todoName,
                          decoration: const InputDecoration(
                              border: UnderlineInputBorder(),
                              hintText: "Activity Name"),
                          validator: (value) {
                            if (value?.isEmpty ?? true) {
                              return 'Enter you activity';
                            } else {
                              return null;
                            }
                          },
                          onSaved: (newValue) {
                            todoName = newValue;
                          },
                        ),
                        const SizedBox(height: 20),
                        TextFormField(
                          initialValue: description,
                          maxLines: 2,
                          decoration: const InputDecoration(
                              border: UnderlineInputBorder(),
                              hintText: "Description"),
                          validator: (value) {
                            if (value?.isEmpty ?? true) {
                              return 'Enter you description';
                            } else {
                              return null;
                            }
                          },
                          onSaved: (newValue) {
                            description = newValue;
                          },
                        )
                      ],
                    ),
                  ),
                ),
                title: const Align(
                    child: Icon(
                      Icons.local_activity_sharp,
                      color: Colors.purple,
                    ),
                    alignment: Alignment.bottomLeft),
                elevation: 2,
                actions: [
                  ElevatedButton(
                      onPressed: () {
                        if (formKey.currentState?.validate() ?? false) {
                          formKey.currentState?.save();
                          todoBloc.add(AddToDoItem(Item(
                              todoName: todoName.toString(),
                              description: description.toString())));
                        }
                      },
                      child: Text(
                        "Add",
                        style: TextStyle(color: Colors.black),
                      ),
                      style: ElevatedButton.styleFrom(
                          backgroundColor: Colors.white)),
                  ElevatedButton(
                      onPressed: () {
                        Navigator.of(context).pop();
                      },
                      child: const Text("Back"))
                ],
              ),
            );
  }

}
